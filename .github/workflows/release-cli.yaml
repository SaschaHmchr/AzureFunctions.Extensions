name: Release CLI

on:
  push:
    branches:
    - release/cli-*

jobs:
  build_test_package:
    name: Build, test and package
    strategy:
      matrix:
        os: [ 'windows-latest' ]
        node: [ 10 ]
        dotnet: [ '3.1.301' ]
        targetFramework: [ 'net461', 'netcoreapp3.1' ]
        runtime: [ 'win-x64', 'linux-x64', 'osx-x64' ]

    runs-on: ${{ matrix.os }}

    steps:
    # - name: Check event payload
    #   if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
    #   shell: pwsh
    #   run: |
    #     echo ${{ toJSON(github.event) }}

    - name: Set release module and version
      id: release
      shell: pwsh
      run: |
        $branch = "${{ github.event.ref }}" -replace "refs/heads/release/", ""
        $segments = $branch -split "-"
        $module = $segments[0]
        $version = $segments[1]

        # echo "::set-env name=RELEASE_MODULE::$module"
        # echo "::set-env name=RELEASE_VERSION::$version"

        echo "::set-output name=module::$module"
        echo "::set-output name=version::$version"

    - name: Check release module and version
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      shell: pwsh
      run: |
        # echo "env: $env:RELEASE_MODULE"
        # echo "env: $env:RELEASE_VERSION"

        echo "output: ${{ steps.release.outputs.module }}"
        echo "output: ${{ steps.release.outputs.version }}"

    - name: Checkout the repository
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      uses: actions/checkout@v2

    # - name: Setup node.js
    #   if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: ${{ matrix.node }}

    - name: Setup .NET SDK
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet }}

    - name: Add MSBuild to PATH
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      uses: microsoft/setup-msbuild@v1.0.0

    - name: Restore NuGet packages
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      shell: pwsh
      run: |
        dir
        dotnet restore .

    - name: Build solution
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      shell: pwsh
      run: |
        dir
        msbuild . /p:Configuration=Release /p:Version=${{ steps.release.outputs.version }} /p:Verbosity=minimal

    - name: Test solution
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      shell: pwsh
      run: |
        dir
        dotnet test . -c Release

    - name: Publish CLI for .NET Framework
      if: steps.release.outputs.module == 'cli' && matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64'
      shell: pwsh
      run: |
        dir
        dotnet publish ./src/Aliencube.AzureFunctions.Extensions.OpenApi.CLI -c Release -f ${{ matrix.targetFramework }} -r ${{ matrix.runtime }}

    - name: Publish CLI for .NET Core
      if: steps.release.outputs.module == 'cli' && matrix.targetFramework == 'netcoreapp3.1'
      shell: pwsh
      run: |
        dir
        dotnet publish ./src/Aliencube.AzureFunctions.Extensions.OpenApi.CLI -c Release -f ${{ matrix.targetFramework }} -p:PublishSingleFile=true --self-contained true -r ${{ matrix.runtime }}

    - name: List Package for OpenApi.CLI
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      shell: pwsh
      run: |
        $sourcepath = "./src/*.OpenApi.CLI/bin/Release/${{ matrix.targetFramework }}/${{ matrix.runtime }}/publish"
        $targetpath = "./src/*.OpenApi.CLI/bin/Release/${{ matrix.targetFramework }}/azfuncopenapi-v${{ steps.release.outputs.version }}-${{ matrix.targetFramework }}-${{ matrix.runtime }}.zip"
        $package = Get-ChildItem -Path $sourcepath -Include *.* -Recurse | Compress-Archive -DestinationPath $targetpath
        $path = (Get-Item $targetpath).FullName
        $name = (Get-Item $targetpath).Name

        echo "::set-env name=PACKAGE_PATH::$path"
        echo "::set-env name=PACKAGE_NAME::$name"

    - name: Check package path and name
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      id: package
      shell: pwsh
      run: |
        echo "package-path: $env:PACKAGE_PATH"
        echo "package-name: $env:PACKAGE_NAME"

        echo "::set-output name=path::$env:PACKAGE_PATH"
        echo "::set-output name=name::$env:PACKAGE_NAME"

    - name: Upload artifacts
      if: steps.release.outputs.module == 'cli' && ((matrix.targetFramework == 'net461' && matrix.runtime == 'win-x64') || matrix.targetFramework == 'netcoreapp3.1')
      uses: actions/upload-artifact@v2
      with:
        name: cli
        path: "${{ steps.package.outputs.path }}"

  package_release:
    name: Release packages
    needs: build_test_package
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
        node: [ 10 ]
        dotnet: [ '3.1.301' ]
        # targetFramework: [ 'net461', 'netcoreapp3.1' ]
        # runtime: [ 'win-x64', 'linux-x64', 'osx-x64' ]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: cli
        path: artifacts

    - name: Get all artifacts
      id: package
      shell: pwsh
      run: |
        dir ./artifacts

        $packages = Get-ChildItem -Path ./artifacts

        $package0 = $packages[0].Name
        $package1 = $packages[1].Name
        $package2 = $packages[2].Name
        $package3 = $packages[3].Name

        echo "package0: $package0"
        echo "package1: $package1"
        echo "package2: $package2"
        echo "package3: $package3"

        echo "::set-output name=package0::$package0"
        echo "::set-output name=package1::$package1"
        echo "::set-output name=package2::$package2"
        echo "::set-output name=package3::$package3"

    # - name: Create Release to GitHub
    #   id: ghrelease
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: "${{ steps.release.outputs.module }}-${{ steps.release.outputs.version }}"
    #     release_name: Release "${{ steps.release.outputs.module }}-v${{ steps.release.outputs.version }}"
    #     draft: false
    #     prerelease: false

    # - name: Upload CLI to GitHub #1
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.ghrelease.outputs.upload_url }}
    #     asset_path: artifacts
    #     asset_name: ${{ steps.package.outputs.package0 }}
    #     asset_content_type: application/zip

    # - name: Upload CLI to GitHub #2
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.ghrelease.outputs.upload_url }}
    #     asset_path: artifacts
    #     asset_name: ${{ steps.package.outputs.package1 }}
    #     asset_content_type: application/zip

    # - name: Upload CLI to GitHub #3
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.ghrelease.outputs.upload_url }}
    #     asset_path: artifacts
    #     asset_name: ${{ steps.package.outputs.package2 }}
    #     asset_content_type: application/zip

    # - name: Upload CLI to GitHub #4
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.ghrelease.outputs.upload_url }}
    #     asset_path: artifacts
    #     asset_name: ${{ steps.package.outputs.package4 }}
    #     asset_content_type: application/zip

    # - name: Release to npm
    #   uses: JS-DevTools/npm-publish@v1
    #   with:
    #     token: ${{ secrets.NPM_TOKEN }}
    #     package: "./src/*.OpenApi.CLI/package.json"
